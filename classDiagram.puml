@startuml

package it.unisa.diem.model.gestione.utenti as uteneti{
    enum Ruolo{
    +  USER
    +  ADMIN
    }

    class SicurezzaPassword {
    - {static} int ITERATION_COUNT
    - {static} int KEY_LENGTH
    + {static} String hashPassword(String,byte[])
    + {static} byte[] generaSalt()
    + {static} boolean verificaPassword(String,String,byte[])
    }


    class Utente {
    - String username
    - String email
    - String hashedPassword
    - Ruolo ruolo
    - byte[] salt
    + String getUsername()
    + void setUsername(String)
    + void setEmail(String)
    + void setHashedPassword(String)
    + void setRuolo(Ruolo)
    + String getEmail()
    + String getHashedPassword()
    + Ruolo getRuolo()
    + byte[] getSalt()
    + boolean equals(Object)
    + String toString()
    }


}

package it.unisa.diem.model.gestione.sessione as sessione{

    class Domanda {
    - long id
    - Sessione sessione
    - int numeroDomanda
    - String testoDomanda
    - TipoDomanda tipo
    - List<String> opzioni
    - String rispostaCorretta
    - String rispostaUtente
    - int tempoLimiteSecondi
    + String getTestoDomanda()
    + TipoDomanda getTipo()
    + List<String> getOpzioni()
    + String getRispostaCorretta()
    + int getTempoLimiteSecondi()
    + boolean verificaRisposta(String)
    + long getId()
    + Sessione getSessione()
    + int getNumeroDomanda()
    + void setId(long)
    + boolean equals(Object)
    + void setSessione(Sessione)
    + void setNumeroDomanda(int)
    + String getRispostaUtente()
    + void setRispostaUtente(String)
    + int hashCode()
    }


    class VoceStorico {
    - LocalDateTime dataFine
    - int punteggio
    - Lingua lingua
    + LocalDateTime getDataFine()
    + int getPunteggio()
    + Lingua getLingua()
    }

    class DomandaFactory {
    ~ List<Domanda> listaDomande
    ~ List<Analisi> listaAnalisi
    + List<Domanda> generaDomande(Difficolta)
    - Domanda generaDomandaFrequenza()
    - Domanda generaDomandaConfronto()
    - Domanda generaDomandaAssociazione()
    - Domanda generaDomandaAssenza()
    }

    class Sessione {
    - long id
    - Utente utente
    - LocalDateTime inizio
    - LocalDateTime fine
    - int punteggio
    + Utente getUtente()
    + LocalDateTime getInizio()
    + long getId()
    + int getPunteggio()
    + LocalDateTime getFine()
    + void setId(long)
    + void setPunteggio(int)
    + void setFine(LocalDateTime)
    + boolean equals(Object)
    + int hashCode()
    }

    class SessioneDocumento {
    - long idSessione
    - String nomeDocumento
    + long getIdSessione()
    + String getNomeDocumento()
    + boolean equals(Object)
    + int hashCode()
    }

    class GameSession {
    - Utente utente
    - Lingua lingua
    - Difficolta difficolta
    - long sessioneId
    - List<Analisi> analyses
    - List<Domanda> domande
    - int currentQuestionIndex
    - int score
    + Utente getUtente()
    + Lingua getLingua()
    + Difficolta getDifficolta()
    + List<Analisi> getAnalyses()
    + void setAnalyses(List<Analisi>)
    + List<Domanda> getDomande()
    + void setDomande(List<Domanda>)
    + int getCurrentQuestionIndex()
    + void setCurrentQuestionIndex(int)
    + int getScore()
    + void setScore(int)
    + Domanda getCurrentQuestion()
    + boolean hasNextQuestion()
    + void incrementQuestionIndex()
    + void incrementScore()
    + long getSessioneId()
    + void setSessioneId(long)
    }

}
package it.unisa.diem.model.gestione.analisi as analisi {
     class Documento {
        - String titolo
        - Lingua lingua
        - Difficolta difficolta
        - String path
        - String testoD
        + String getTestoD()
        + String getTitolo()
        + Lingua getLingua()
        + String getPath()
        + void setPath(String)
        + Difficolta getDifficolta()
        + void convertiTxtToBin(File)
        + {static} Documento leggiDocumento(String)
        - {static} void getAttributes(String,Documento)
        + void eliminaDocumento()
        + String toString()
        }


        enum Difficolta {
        +  FACILE
        +  INTERMEDIO
        +  DIFFICILE
        }

        enum Lingua {
        +  ITA
        +  ENG
        }


        class Analisi {
        - Documento documento
        - Map<String,Integer> frequenzeTesto
        - Lingua linguaAnalisi
        - Difficolta difficoltaAnalisi
        - String titolo
        - StopwordManager stopwordAnalisi
        - String pathAnalisi
        + Documento getDocumento()
        + String getTitolo()
        + String getPathAnalisi()
        + Map<String,Integer> getFrequenzeTesto()
        - List<String> getWordsDocument()
        + Map<String,Integer> analizza()
        + void caricaAnalisi()
        + {static} Analisi leggiAnalisi(Documento)
        - {static} String recuperaAnalisiPath(Documento)
        + void eliminaAnalisi()
        + String toString()
        }


}
package it.unisa.diem.model.gestione.classifica as classifica{
    class VoceClassifica {
    - String username
    - double mediaPunteggio
    - int sommaPunteggio
    + String getUsername()
    + int getSommaPunteggio()
    + double getMediaPunteggio()
    }
}

package it.unisa.diem.dao.interfacce as DAO {
    interface ReadOnlyDAO {
    ~ List<T> selectAll()
    ~ Optional<T> selectById(long)
    }

    interface DAO {
    ~ List<T> selectAll()
    ~ void insert(T)
    ~ void update(T)
    ~ void delete(T)
    }
    interface SessioneDAO {
    ~ Optional<Sessione> selectByUser(String)
    ~ Optional<Sessione> selectById(long)
    ~ void delete(long)
    ~ List<VoceStorico> selectByLastSessions(String,Difficolta)
    ~ List<VoceClassifica> selectByTopRanking(Difficolta)
    }

    interface SessioneDocumentoDAO {
    ~ List<Documento> selectDocumentsBySession(long)
    ~ void deleteBySessioneId(long)
    }

    interface DocumentoDAO {
    ~ Optional<Documento> selectByTitle(String)
    ~ List<String> selectAllTitles()
    ~ List<String> selectTitlesByLangAndDif(Lingua,Difficolta)
    }

    interface AnalisiDAO {
    ~ Optional<Analisi> selectAnalisiByTitle(String)
    ~ void insert(Analisi)
    ~ void delete(Analisi)
    }

    interface UtenteDAO {
    ~ boolean emailAlreadyExists(String)
    ~ boolean usernameAlreadyExists(String)
    ~ Optional<Utente> selectByUsername(String)
    ~ void update(String,Utente)
    }

    interface NotEditableDAO {
    ~ List<T> selectAll()
    ~ void insert(T)
    ~ void delete(T)
    }
}

package it.unisa.diem.model.gestione.analisi.stopword as stopword{
    abstract class StopwordManager {
    - Documento documento
    # Set<String> parole
    + Documento getDocumento()
    + void aggiungi(String)
    + List<String> getParole()
    + void rimuovi(String)
    + void modifica(String,String)
    + void caricaStopword(boolean,boolean,boolean,boolean,boolean,boolean)
    - void aggiungiArray(String[])
    # {abstract}String[] getArticoli()
    # {abstract}String[] getPreposizioni()
    # {abstract}String[] getPronomi()
    # {abstract}String[] getVerbiAvere()
    # {abstract}String[] getVerbiEssere()
    # {abstract}String[] getConnettiviCongiunzioni()
    + String[] getPunteggiatura()
    + void clear()
    + String toString()
    }


    class StopwordITA {
    # String[] getArticoli()
    # String[] getPreposizioni()
    # String[] getPronomi()
    # String[] getVerbiAvere()
    # String[] getVerbiEssere()
    # String[] getConnettiviCongiunzioni()
    }
    class StopwordENG {
    # String[] getArticoli()
    # String[] getPreposizioni()
    # String[] getPronomi()
    # String[] getVerbiAvere()
    # String[] getVerbiEssere()
    # String[] getConnettiviCongiunzioni()
    }


}
package it.unisa.diem.dao.postgres as postgres{
    class SessioneDAOPostgres {
    - UtenteDAO utenteDAO
    + Optional<Sessione> selectById(long)
    + Optional<Sessione> selectByUser(String)
    + List<Sessione> selectAll()
    + void insert(Sessione)
    + void update(Sessione)
    + void delete(Sessione)
    + void delete(long)
    - Sessione getSession(ResultSet)
    - Utente getUser(String)
    - void setSessionForInsert(PreparedStatement,Sessione)
    - void setSessionForUpdate(PreparedStatement,Sessione)
    - void setSessionForDelete(PreparedStatement,Sessione)
    + List<VoceStorico> selectByLastSessions(String,Difficolta)
    + List<VoceClassifica> selectByTopRanking(Difficolta)
    - VoceClassifica getLeaderboard(ResultSet)
    - VoceStorico getLastSessions(ResultSet)
    }

    class UtenteDAOPostgres {
    + boolean emailAlreadyExists(String)
    + boolean usernameAlreadyExists(String)
    + Optional<Utente> selectByUsername(String)
    + List<Utente> selectAll()
    + void insert(Utente)
    + void update(Utente)
    + void update(String,Utente)
    + void delete(Utente)
    - Utente getUser(ResultSet)
    - void setUserForInsert(PreparedStatement,Utente)
    - void setUserForUpdate(PreparedStatement,Utente)
    - void setUserForUpdate(PreparedStatement,String,Utente)
    - void setUserForDelete(PreparedStatement,Utente)
    }

    class AnalisiDAOPostgres {
    + Optional<Analisi> selectAnalisiByTitle(String)
    + List<Analisi> selectAll()
    + void insert(Analisi)
    + void delete(Analisi)
    - Analisi getAnalisi(ResultSet)
    }


    class SessioneDocumentoDAOPostgres {
    + List<Documento> selectDocumentsBySession(long)
    + List<SessioneDocumento> selectAll()
    + void insert(SessioneDocumento)
    + void delete(SessioneDocumento)
    - Documento getDocument(ResultSet)
    - SessioneDocumento getSessionDocument(ResultSet)
    + void deleteBySessioneId(long)
    }

    class DocumentoDAOPostgres {
    + Optional<Documento> selectByTitle(String)
    + List<Documento> selectAll()
    + List<String> selectAllTitles()
    + List<String> selectTitlesByLangAndDif(Lingua,Difficolta)
    + void insert(Documento)
    + void delete(Documento)
    - Documento getDocument(ResultSet)
    - void setDocumentForInsert(PreparedStatement,Documento)
    - void setDocumentForDelete(PreparedStatement,Documento)
    }


}


DAO <|-- SessioneDAO
SessioneDAO <|.. SessioneDAOPostgres
NotEditableDAO <|-- SessioneDocumentoDAO
SessioneDAOPostgres <|-- SessioneDocumentoDAO
NotEditableDAO <|-- DocumentoDAO
UtenteDAO <|.. UtenteDAOPostgres
NotEditableDAO <|-- interfacce.AnalisiDAO
DAO <|-- UtenteDAO
StopwordManager <|-- StopwordITA
AnalisiDAO <|.. AnalisiDAOPostgres
StopwordManager <|-- StopwordENG
DocumentoDAO <|.. DocumentoDAOPostgres
@enduml